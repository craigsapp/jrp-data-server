#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Mon 04 Oct 2021 08:55:47 PM PDT
# Last Modified: Wed 24 Nov 2021 04:14:30 PM PST
# Filename:      cache/bin/makePopc1LyricsIndex
# Syntax:        perl 5
# vim:           ts=3
#
# Description:   Reads cache-index.hmd to generate a list of lyrics wordlist fields.
#

use strict;
use Getopt::Long;

my $indexfile;
my $kerndir;
Getopt::Long::Configure("bundling");
GetOptions (
   'i|index=s' => \$indexfile
);

$indexfile = "cache-index.hmd" if $indexfile =~ /^\s*$/;

# Cache depth (number of subdirectory levels until file directories).
my $cacheDepth = 1;

my %index = getIndexFileId($indexfile);

my @keys = sort keys %index;

my $output = "";
foreach my $key (@keys) {
	print STDERR "Processing $key ...\n";
	$output .= prepareEntry($key, $index{$key});
}
print $output;

exit(0);

###########################################################################


##############################
##
## prepareEntry --
##

sub prepareEntry {
	my ($cenid, $md5) = @_;
	my $sourcedir = getSourceDir($md5, $cacheDepth);

	my $wordlistfile = "$sourcedir/$md5-wordlist.txt";
	return "" if !-r $wordlistfile;

	my @contents = `cat $wordlistfile`;
	my $line = $contents[0];
	chomp $line;
	return "" if $line =~ /^\s*$/;
	return "$cenid\t$line\n";
}



##############################
##
## getSourceDir --
##

sub getSourceDir {
	my ($md5, $cacheDepth) = @_;
	return $md5 if $cacheDepth == 0;
	my @pieces = split(//, $md5);
	my $output = "";
	for (my $i=0; $i<$cacheDepth; $i++) {
		$output .= $pieces[$i] . "/";
	}
	$output .= $md5;
	return $output;
}



##############################
##
## getIndexFileId -- Mapping from FileId to MD5 ID.
##

sub getIndexFileId {
	my ($indexfile) = @_;
	open(FILE, $indexfile) or die "Cannot read $indexfile\n";
	my @contents = <FILE>;
	chomp @contents;
	close FILE;
	my $md5Index   = -1;
	my $fileidIndex = -1;
	my $exinterp   = 0;
	my %output;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		next if $line =~ /^!/;
		if ($line =~ /^\*\*/) {
			$exinterp = 1;
			my @fields = split(/\t+/, $line);
			for (my $j=0; $j<@fields; $j++) {
				$md5Index    = $j if $fields[$j] eq "**md5";
				$fileidIndex  = $j if $fields[$j] eq "**fileid";
			}
			next;
		}
		next if $line =~ /^\*/;
		next if !$exinterp;
		die "Cannot find MD5 column in index file\n" if $md5Index < 0;
		die "Cannot find FileId column in index file\n" if $fileidIndex < 0;
		my @fields = split(/\t+/, $line);
		my $fileid = $fields[$fileidIndex];
		next if $fileid eq ".";
		next if $fileid =~ /^pl-/;   # ignore for POPC1 scores if from Poland
		next if $fileid =~ /^s-/;    # ignore for POPC1 scores if from Sweden
		next if $fileid =~ /^d-/;    # ignore for POPC1 scores if from Germany
		next if $fileid =~ /^f-/;    # ignore for POPC1 scores if from France
		next if $fileid =~ /^i-/;    # ignore for POPC1 scores if from Italy
		next if $fileid =~ /^sk-/;   # ignore for POPC1 scores if from Slovakia
		next if $fileid =~ /^cz-/;   # ignore for POPC1 scores if from Chechia
		my $md5 = $fields[$md5Index];
		$output{$fileid} = $md5;
	}
	return %output;
}



