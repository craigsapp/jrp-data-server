#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Thu Dec 14 07:33:01 AM PST 2023
# Last Modified: Thu Dec 14 07:33:04 AM PST 2023
# Filename:      cache/bin/makeSpreadsheetInfo
# Syntax:        perl 5
# vim:           ts=3
#
# Description:   Download digital score metadata from Google Spreadsheet and store in cache.
#
# Options:
#     -i index-file  == File that contains a list of the input
#                       files and MD5 ID mapping for cache directories.
#

use strict;
use Getopt::Long;

# Cache depth (number of subdirectory levels until file directories).
my $cacheDepth = 1;

my $wget = `which wget`;
if (($wget =~ /^\s*$/) and (-r "/usr/bin/wget")) {
	$wget = "/usr/bin/wget";
}
chomp $wget;
die "Cannot find wget program\n" if $wget =~ /^\s*$/;

# Sheet URL: https://docs.google.com/spreadsheets/d/1KBXyuyE4pfJ61UtQBEfEwLp-vjoyFO_fbUU03DOsiGU/edit#gid=0
my $macroid = "AKfycbyeHfmyCHHgbY9X_UDMzW9xyRgqH0c7Ycp76NTW18mjZSnW_2umhgH2ZGDtxuwDot6mKw";
my $indexfile;
Getopt::Long::Configure("bundling");
GetOptions (
   'i|index=s' => \$indexfile,
   'm|macroid=s' => \$macroid
);

$indexfile = "cache-index-new.hmd" if $indexfile =~ /^\s*$/;
if (!-r $indexfile) {
	$indexfile = "cache-index.hmd";
}

my %index = getCentToMd5Index($indexfile);

my $sheeturl = "https://script.google.com/macros/s/$macroid/exec?format=aton&lang=en";
my %entriesByJrpid = getEntriesByJrpid($sheeturl);

foreach my $jrpid (sort keys %index) {
	createSpreadsheetFile($jrpid, $index{$jrpid});
}

exit(0);

###########################################################################


##############################
##
## createSpreadsheetFile --
##

sub createSpreadsheetFile {
	my ($jrpid, $md5) = @_;
	my $targetdir = getTargetDir($md5, $cacheDepth);

	die" Cannot find directory $targetdir\n" if !-d $targetdir;
	my $entry = $entriesByJrpid{$jrpid};
	return if $entry =~ /^\s*$/;

	print "Creating $targetdir/$md5-spreadsheet.aton\n";
	open(FILE, ">$targetdir/$md5-spreadsheet.aton") or die "Cannot write spreadsheet info\n";
	print FILE $entry;
	close FILE;
}



##############################
##
## getEntriesByJrpid --
##

sub getEntriesByJrpid {
	my ($dataurl) = @_;
	my $command = "$wget \"$dataurl\" -O -";
	my @contents = `$command`;
	my %output;
	my $entry;
	my $jrpid;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		chomp $line;
		if ($line =~ /^\@\@BEGIN\s*:\s*ENTRY\s*$/) {
			$entry = "";
			$jrpid = "";
			next;
		}
		if ($line =~ /^\@\@END\s*:\s*ENTRY\s*$/) {
			$entry .= addFlagInformation($index{$jrpid}, $jrpid);
			if ($jrpid !~ /^\s*$/) {
				$output{$jrpid} = $entry;
			}
			$jrpid = "";
			$entry = "";
			next;
		}
		next if $line =~ /^\@sheet\s*:/;
		next if $line =~ /^\@lang\s*:/;
		$entry .= "$line\n";
		if ($line =~ /^\@WORK_ID\s*:\s*(.*)\s*$/i) {
			$jrpid = $1;
		}
	}
	return %output;
}



##############################
##
## addFlagInformation --
##

sub addFlagInformation {
	my ($md5sum, $jrpid) = @_;
	if ($md5sum =~ /^\s*$/) {
		return "!!!flags:\n";
	}
	my $output = "";

	my $iiifQ    = "";
	my $modernQ  = "";
	my $singleQ  = "";
	my $textQ    = "";
	my $fbQ      = "";

	my $hasXywh = 0;
	my $hasIiif = 0;
	my $hasMultiple = 0;

	$md5sum =~ /^([0-9a-f])/;
	my $prefix = $1;
	my $file = "$1/$md5sum/$md5sum.krn";
	open(HFILE, $file) or die "Cannot read $file\n";
	my @contents = <HFILE>;
	close @contents;
	chomp @contents;
	foreach my $line (@contents) {
		$hasMultiple = 1 if $line =~ /\*\^/;
		$hasXywh = 1     if $line =~ /^\*.*xywh/;
		$hasIiif = 1     if $line =~ /^!!!IIIF/;
		$textQ   = "T"   if $line =~ /^\*\*.*text/;
		$fbQ     = "F"   if $line =~ /^\*\*.*fb/;
		$fbQ     = "F"   if $line =~ /^\*\*.*fba/;
		$modernQ = "M"   if $line =~ /^!!!filter-modern:/;
	}

	if ($hasXywh && $hasIiif) {
		$iiifQ = "I";
	} elsif ($hasXywh) {
		$iiifQ = "i";
	} elsif ($hasXywh) {
		$iiifQ = "i";
	}

	if (!$hasMultiple) {
		$singleQ = "S";
	}

	# F = has figured bass encodings
	# I = has IIIF encodings (bounding boxes and IIIF manifest)
	# i = has incomplete IIIF encodings (bounding boxes or IIIF manifest)
	# M = has modern filter
	# S = has non-splitting spines (simple voices)  This should be refined
	# 	   so that only **kern spines are checked for split.
	# T = has text (lyrics)
	$output = "\@flags:\t\t\t$fbQ$iiifQ$modernQ$singleQ$textQ\n";

	return $output;
}



##############################
##
## getCentToMd5Index --
##

sub getCentToMd5Index {
	my ($indexfile) = @_;
	open(FILE, $indexfile) or die "Cannot read $indexfile\n";
	my @contents = <FILE>;
	chomp @contents;
	close FILE;
	my $md5Index    = -1;
	my $jrpidIndex = -1;
	my $exinterp = 0;
	my %output;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		chomp $line;
		next if $line =~ /^!/;
		if ($line =~ /^\*\*/) {
			$exinterp = 1;
			my @fields = split(/\t+/, $line);
			for (my $j=0; $j<@fields; $j++) {
				$md5Index    = $j if $fields[$j] eq "**md5";
				$jrpidIndex = $j if $fields[$j] eq "**jrpid";
			}
			next;
		}
		next if $line =~ /^\*/;
		next if !$exinterp;
		die "Cannot find MD5 column in index file\n" if $md5Index < 0;
		die "Cannot find Century ID column in index file\n" if $jrpidIndex < 0;
		my @fields = split(/\t+/, $line);
		my $jrpid = $fields[$jrpidIndex];
		next if $jrpid =~ /^\s*$/;
		next if $jrpid eq ".";
		my $md5 = $fields[$md5Index];
		$output{$jrpid} = $md5;
	}

	return %output;
}



##############################
##
## getTargetDir --
##

sub getTargetDir {
	my ($md5, $cacheDepth) = @_;
	return $md5 if $cacheDepth == 0;
	my @pieces = split(//, $md5);
	my $output = "";
	for (my $i=0; $i<$cacheDepth; $i++) {
		$output .= $pieces[$i] . "/";
	}
	$output .= $md5;
	return $output;
}



