#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Sun 19 Sep 2021 05:40:13 AM PDT
# Last Modified: Sun 03 Oct 2021 01:11:18 PM PDT
# Filename:      cache/bin/makePopc2ScoreIndex
# Syntax:        perl 5
# vim:           ts=3
#
# Description:   Reads cache-index.hmd to generate a list of browse search fields.
#

use strict;
use Getopt::Long;


my $notecount = `which notecount`;
chomp $notecount;
die "Cannot find notecount tool\n" if $notecount =~ /^\s*$/;


my $indexfile;
my $kerndir;
Getopt::Long::Configure("bundling");
GetOptions (
   'i|index=s' => \$indexfile
);

$indexfile = "cache-index.hmd" if $indexfile =~ /^\s*$/;

# Cache depth (number of subdirectory levels until file directories).
my $cacheDepth = 1;

my %index = getIndexCentId($indexfile);

# Sort by century ID:
my @keys = sort {
	$a =~ /^(1[\d])xx:(\d+)([a-z]*)/;
	my $cenA = $1;
	my $numA = $2;
	my $letA = $3;
	$b =~ /^(1[\d])xx:(\d+)([a-z]*)/;
	my $cenB = $1;
	my $numB = $2;
	my $letB = $3;
	if ($cenA != $cenB) { return $cenA <=> $cenB; }
	if ($numA != $numB) { return $numA <=> $numB; }
	return $letA cmp $letB;
} keys %index;

my $output = "";
# $output .= "\@\@TYPE:notecount:Integer\n\n";
foreach my $key (@keys) {
	print STDERR "Processing $key ... for score index\n";
	$output .= prepareEntry($key, $index{$key});
}
print $output;

exit(0);

###########################################################################


##############################
##
## prepareEntry --
##

sub prepareEntry {
	my ($cenid, $md5) = @_;
	my $sourcedir = getSourceDir($md5, $cacheDepth);
	my $kernfile = "$sourcedir/$md5.krn";
	die "Cannot find $sourcedir/$md5.krn\n" if !-r $kernfile;
	my %references = getBibliographicReferences($kernfile);
	my $composer = $references{"COM"};
	$composer = $references{"COM1"} if $composer =~ /^\s*$/;
	$composer = $references{"COA"} if $composer =~ /^\s*$/;
	$composer = $references{"COA1"} if $composer =~ /^\s*$/;
	$composer = $references{"COS"} if $composer =~ /^\s*$/;
	$composer = $references{"COS1"} if $composer =~ /^\s*$/;
	die "No composer field in file $kernfile\n" if $composer =~ /^\s*$/;

	# my $title = "";
	my $GTL = $references{"GTL"};
	my $OPR = $references{"OPR"};
	my $OTL = $references{"OTL"};
	my $AGN = $references{"AGN"};
	my $AIN = $references{"AIN"};
	my $CNT = $references{"CNT"};
	my $edit = $references{"edit"};
	my $key  = getKeyDesignation($kernfile);
	my $notecount = getNoteCount($kernfile);
	my $siglum = $references{"SMS-siglum"};
	my $shelfmark = $references{"SMS-shelfmark"};
	my $shelfwork = $references{"SMS-shelfwork"};
	my $pmsid   = getPmsId(%references);
	my $rismid  = getRismId(%references);
	my $fileid = $references{"!SEGMENT"};
	$fileid =~ s/\.krn//;
	$fileid =~ s/_.*//;
	my $flags = getFlags("$sourcedir/$md5-spreadsheet.aton");

	$CNT = "undetermined" if $CNT =~ /^\s*$/;
	$AGN = "uncategorized" if $AGN =~ /^\s*$/;

	my $output = "";
	$output .= "\@\@BEGIN:\tENTRY\n";
	$output .= "\@cenid:\t\t$cenid\n";
	$output .= "\@fileid:\t$fileid\n";
	$output .= "\@rismid:\t$rismid\n";
	$output .= "\@pmsid:\t\t$pmsid\n";
	$output .= "\@siglum:\t$siglum\n";
	$output .= "\@shelfmark:\t$shelfmark\n";
	$output .= "\@shelfwork:\t$shelfwork\n";
	$output .= "\@COM:\t\t$composer\n";
	$output .= "\@CNT:\t\t$CNT\n";
	$output .= "\@GTL:\t\t$GTL\n" if $GTL !~ /^\s*$/;
	$output .= "\@OPR:\t\t$OPR\n" if $OPR !~ /^\s*$/;
	$output .= "\@OTL:\t\t$OTL\n" if $OTL !~ /^\s*$/;
	$output .= "\@AGN:\t\t$AGN\n";
	$output .= "\@AIN:\t\t$AIN\n";
	$output .= "\@key:\t\t$key\n";
	$output .= "\@notecount:\t$notecount\n";
	$output .= "\@lastedit:\t$edit\n";
	$output .= "\@flags:\t\t$flags\n";
	$output .= "\@\@END:\t\tENTRY\n";
	$output .= "\n";

	return $output;
}



##############################
##
## getFlags --
##

sub getFlags {
	my ($file) = @_;
	open (SFILE, $file) or return "";
	my @contents = <SFILE>;
	chomp @contents;
	close SFILE;
	for (my $i=@contents-1; $i>=0; $i--) {
		# more likely to be at end of spreadsheet info
		my $line = $contents[$i];
		if ($line =~ /^\@flags:\s*(.*)\s*$/) {
			return $1;
		}
	}
	return "";
}



##############################
##
## getPmsId -- Return the PMS (Polish Music Sources).
##
## https://polish.musicsources.pl/pl/lokalizacje/galeria/rekopisy/6180
##

sub getPmsId {
	my %refs = @_;
	my $urlscan = $refs{"URL-scan"};
	if ($urlscan =~ /^\s*$/) {
		return "";
	}
	if ($urlscan =~ /https:\/\/polish.musicsources\.pl\/(?:pl|en|[a-z][a-z])\/lokalizacje\/galeria\/(.)[a-zA-Z_-]*\/(\d+)/) {
		return "$1$2";
	}

	return "";
}



##############################
##
## getRismId -- Return the PMS (Polish Music Sources).
##
##

sub getRismId {
	my %refs = @_;
	my $nifcrism = $refs{"NIFC-rismSourceID"};
	if ($nifcrism =~ /^\s*$/) {
		return "";
	}
	if ($nifcrism =~ /^\s*(\d+)\s*$/) {
		return "$1";
	}

	return "";
}



##############################
##
## getNoteCount -- Return the printed notecount for the given file.
##

sub getNoteCount {
	my ($filename) = @_;
	my $command = "$notecount -s $filename";
	my @data = `$command`;
	my $count = 0;
	if (@data != 1) {
		$count = 0;
	} else {
		my @fields = split(/\t+/, $data[0]);
		$count = $fields[1];
	}
	return $count;
}



##############################
##
## getBibliographicReferences --
##

sub getBibliographicReferences {
	my ($kernfile) = @_;
	open(FILE, $kernfile) or die "Cannot read $kernfile\n";
	my @contents = <FILE>;
	close FILE;
	my %output;
	my @dates;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		next if $line !~ /^!!!([^:]+)\s*:\s*(.*)\s*$/;
		my $key = $1;
		my $value = $2;
		$output{$key} = $value;
		if ($key eq "EST") { $dates[@dates] = $value; }
		if ($key eq "END") { $dates[@dates] = $value; }
		if ($key eq "EEV") { $dates[@dates] = $value; }
	}

	my @sdates;
	for (my $i=0; $i<@dates; $i++) {
		my $value = $dates[$i];
		if ($value =~ /\b(\d{4})\b.*?\b(\d+)\b.*?\b(\d+)\b/) {
			my $year  = $1;
			my $month = int($2);
			my $day   = int($3);
			$month    = "0$month" if $month < 10;
			$day      = "0$day" if $day < 10;
			$value = "$year$month$day";
			$sdates[@sdates] = $value;
		}
	}
	@sdates = sort @sdates;
	if (@sdates > 0) {
		$output{"edit"} = $sdates[$#sdates];
	} else {
		$output{"edit"} = 0;
	}

	return %output;
}



##############################
##
## getSourceDir --
##

sub getSourceDir {
	my ($md5, $cacheDepth) = @_;
	return $md5 if $cacheDepth == 0;
	my @pieces = split(//, $md5);
	my $output = "";
	for (my $i=0; $i<$cacheDepth; $i++) {
		$output .= $pieces[$i] . "/";
	}
	$output .= $md5;
	return $output;
}



##############################
##
## getIndexCentId -- Mapping from CentId to MD5 ID.
##

sub getIndexCentId {
	my ($indexfile) = @_;
	open(FILE, $indexfile) or die "Cannot read $indexfile\n";
	my @contents = <FILE>;
	chomp @contents;
	close FILE;
	my $md5Index   = -1;
	my $cenidIndex = -1;
	my $exinterp   = 0;
	my %output;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		next if $line =~ /^!/;
		if ($line =~ /^\*\*/) {
			$exinterp = 1;
			my @fields = split(/\t+/, $line);
			for (my $j=0; $j<@fields; $j++) {
				$md5Index    = $j if $fields[$j] eq "**md5";
				$cenidIndex  = $j if $fields[$j] eq "**cenid";
			}
			next;
		}
		next if $line =~ /^\*/;
		next if !$exinterp;
		die "Cannot find MD5 column in index file\n" if $md5Index < 0;
		die "Cannot find FileId column in index file\n" if $cenidIndex < 0;
		my @fields = split(/\t+/, $line);
		my $cenid = $fields[$cenidIndex];
		next if $cenid eq ".";
		my $md5 = $fields[$md5Index];
		$output{$cenid} = $md5;
	}
	return %output;
}



##############################
##
## getKeyDesignation --
##

sub getKeyDesignation {
	my ($file) = @_;
	open (FILE, $file) or die "Cannot read file $file\n";
	my @contents = <FILE>;
	close FILE;
	chomp @contents;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		next if $line =~ /^\s*$/;
		next if $line =~ /^!/;
		if ($line =~ /^\*/) {
			my @data = split(/\t+/, $line);
			for (my $j=0; $j<@data; $j++) {
				my $datum = $data[$j];
				if ($datum =~ /^\*([A-G][-#]*):$/i) {
					return $1;
				}
				if ($datum =~ /^\*([A-G][-#]*:(ion|lyd|mix))$/) {
					return $1;
				}
				if ($datum =~ /^\*([a-g][-#]*:(dor|phr|aeo|loc))$/) {
					return $1;
				}
			}
		}
		next if $line =~ /^\*/;
		next if $line =~ /^=/;
		last;
	}
	return "";
}



